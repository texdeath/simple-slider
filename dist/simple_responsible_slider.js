!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.lib=e():t.lib=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=53)}([function(t,e,n){var r=n(7)("wks"),i=n(8),o=n(1).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){var r=n(9),i=n(20);t.exports=n(4)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){var n=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},function(t,e,n){t.exports=!n(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(1),i=n(2),o=n(6),u=n(8)("src"),c=n(36),a=(""+c).split("toString");n(3).inspectSource=function(t){return c.call(t)},(t.exports=function(t,e,n,c){var s="function"==typeof n;s&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(s&&(o(n,u)||i(n,u,t[e]?""+t[e]:a.join(String(e)))),t===r?t[e]=n:c?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(3),i=n(1),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(18)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(10),i=n(31),o=n(32),u=Object.defineProperty;e.f=n(4)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(11);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports={}},function(t,e,n){var r=n(34),i=n(22);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(42),i=n(25);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(7)("keys"),i=n(8);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){"use strict";var r=n(30),i=n(33),o=n(13),u=n(14);t.exports=n(35)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=!1},function(t,e,n){var r=n(11),i=n(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(1),i=n(3),o=n(2),u=n(5),c=n(37),a=function(t,e,n){var s,f,l,h,p=t&a.F,d=t&a.G,v=t&a.S,m=t&a.P,y=t&a.B,g=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),x=b.prototype||(b.prototype={});for(s in d&&(n=e),n)l=((f=!p&&g&&void 0!==g[s])?g:n)[s],h=y&&f?c(l,r):m&&"function"==typeof l?c(Function.call,l):l,g&&u(g,s,l,t&a.U),b[s]!=l&&o(b,s,h),m&&x[s]!=l&&(x[s]=l)};r.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(9).f,i=n(6),o=n(0)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(22);t.exports=function(t){return Object(r(t))}},function(t,e,n){(function(e){var n=1/0,r=9007199254740991,i=1.7976931348623157e308,o=NaN,u=4294967295,c="[object Arguments]",a="[object Function]",s="[object GeneratorFunction]",f="[object Map]",l="[object Set]",h="[object String]",p="[object Symbol]",d=/^\s+|\s+$/g,v=/^[-+]0x[0-9a-f]+$/i,m=/^0b[01]+$/i,y=/^\[object .+?Constructor\]$/,g=/^0o[0-7]+$/i,b=/^(?:0|[1-9]\d*)$/,x="[\\ud800-\\udfff]",_="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",w="\\ud83c[\\udffb-\\udfff]",j="[^\\ud800-\\udfff]",E="(?:\\ud83c[\\udde6-\\uddff]){2}",S="[\\ud800-\\udbff][\\udc00-\\udfff]",O="(?:"+_+"|"+w+")"+"?",L="[\\ufe0e\\ufe0f]?"+O+("(?:\\u200d(?:"+[j,E,S].join("|")+")[\\ufe0e\\ufe0f]?"+O+")*"),k="(?:"+[j+_+"?",_,E,S,x].join("|")+")",T=RegExp(w+"(?="+w+")|"+k+L,"g"),P=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),M=parseInt,C="object"==typeof e&&e&&e.Object===Object&&e,I="object"==typeof self&&self&&self.Object===Object&&self,A=C||I||Function("return this")();function D(t,e){return function(t,e){for(var n=-1,r=t?t.length:0,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}(e,function(e){return t[e]})}function X(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function N(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function F(t){return function(t){return P.test(t)}(t)?function(t){return t.match(T)||[]}(t):function(t){return t.split("")}(t)}var R,$,V,z=Function.prototype,B=Object.prototype,G=A["__core-js_shared__"],U=(R=/[^.]+$/.exec(G&&G.keys&&G.keys.IE_PROTO||""))?"Symbol(src)_1."+R:"",W=z.toString,H=B.hasOwnProperty,q=B.toString,J=RegExp("^"+W.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),K=A.Symbol,Q=K?K.iterator:void 0,Y=B.propertyIsEnumerable,Z=Math.floor,tt=($=Object.keys,V=Object,function(t){return $(V(t))}),et=Math.random,nt=mt(A,"DataView"),rt=mt(A,"Map"),it=mt(A,"Promise"),ot=mt(A,"Set"),ut=mt(A,"WeakMap"),ct=bt(nt),at=bt(rt),st=bt(it),ft=bt(ot),lt=bt(ut);function ht(t,e){var n=_t(t)||function(t){return function(t){return St(t)&&wt(t)}(t)&&H.call(t,"callee")&&(!Y.call(t,"callee")||q.call(t)==c)}(t)?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],r=n.length,i=!!r;for(var o in t)!e&&!H.call(t,o)||i&&("length"==o||gt(o,r))||n.push(o);return n}function pt(t){return!(!Et(t)||(e=t,U&&U in e))&&(jt(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?J:y).test(bt(t));var e}function dt(t){if(n=(e=t)&&e.constructor,r="function"==typeof n&&n.prototype||B,e!==r)return tt(t);var e,n,r,i=[];for(var o in Object(t))H.call(t,o)&&"constructor"!=o&&i.push(o);return i}function vt(t,e){return t+Z(et()*(e-t+1))}function mt(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return pt(n)?n:void 0}var yt=function(t){return q.call(t)};function gt(t,e){return!!(e=null==e?r:e)&&("number"==typeof t||b.test(t))&&t>-1&&t%1==0&&t<e}function bt(t){if(null!=t){try{return W.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function xt(t,e,r){var u,c,a,s=-1,y=function(t){if(!t)return[];if(wt(t))return function(t){return"string"==typeof t||!_t(t)&&St(t)&&q.call(t)==h}(t)?F(t):function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(t);if(Q&&t[Q])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Q]());var e=yt(t);return(e==f?X:e==l?N:Ot)(t)}(t),b=y.length,x=b-1;for((r?function(t,e,n){if(!Et(n))return!1;var r=typeof e;return!!("number"==r?wt(n)&&gt(e,n.length):"string"==r&&e in n)&&function(t,e){return t===e||t!=t&&e!=e}(n[e],t)}(t,e,r):void 0===e)?e=1:(u=function(t){var e=function(t){if(!t)return 0===t?t:0;if((t=function(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||St(t)&&q.call(t)==p}(t))return o;if(Et(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Et(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(d,"");var n=m.test(t);return n||g.test(t)?M(t.slice(2),n?2:8):v.test(t)?o:+t}(t))===n||t===-n){var e=t<0?-1:1;return e*i}return t==t?t:0}(t),r=e%1;return e==e?r?e-r:e:0}(e),c=0,a=b,u==u&&(void 0!==a&&(u=u<=a?u:a),void 0!==c&&(u=u>=c?u:c)),e=u);++s<e;){var _=vt(s,x),w=y[_];y[_]=y[s],y[s]=w}return y.length=e,y}(nt&&"[object DataView]"!=yt(new nt(new ArrayBuffer(1)))||rt&&yt(new rt)!=f||it&&"[object Promise]"!=yt(it.resolve())||ot&&yt(new ot)!=l||ut&&"[object WeakMap]"!=yt(new ut))&&(yt=function(t){var e=q.call(t),n="[object Object]"==e?t.constructor:void 0,r=n?bt(n):void 0;if(r)switch(r){case ct:return"[object DataView]";case at:return f;case st:return"[object Promise]";case ft:return l;case lt:return"[object WeakMap]"}return e});var _t=Array.isArray;function wt(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=r}(t.length)&&!jt(t)}function jt(t){var e=Et(t)?q.call(t):"";return e==a||e==s}function Et(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function St(t){return!!t&&"object"==typeof t}function Ot(t){return t?D(t,function(t){return wt(t)?ht(t):dt(t)}(t)):[]}t.exports=function(t){return xt(t,u)}}).call(this,n(52))},function(t,e,n){for(var r=n(17),i=n(15),o=n(5),u=n(1),c=n(2),a=n(13),s=n(0),f=s("iterator"),l=s("toStringTag"),h=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var m,y=d[v],g=p[y],b=u[y],x=b&&b.prototype;if(x&&(x[f]||c(x,f,h),x[l]||c(x,l,y),a[y]=h,g))for(m in r)x[m]||o(x,m,r[m],!0)}},function(t,e,n){var r=n(0)("unscopables"),i=Array.prototype;null==i[r]&&n(2)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e,n){t.exports=!n(4)&&!n(12)(function(){return 7!=Object.defineProperty(n(19)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(11);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){var r=n(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){"use strict";var r=n(18),i=n(23),o=n(5),u=n(2),c=n(13),a=n(39),s=n(26),f=n(47),l=n(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,v,m,y){a(n,e,d);var g,b,x,_=function(t){if(!h&&t in S)return S[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},w=e+" Iterator",j="values"==v,E=!1,S=t.prototype,O=S[l]||S["@@iterator"]||v&&S[v],L=O||_(v),k=v?j?_("entries"):L:void 0,T="Array"==e&&S.entries||O;if(T&&(x=f(T.call(new t)))!==Object.prototype&&x.next&&(s(x,w,!0),r||"function"==typeof x[l]||u(x,l,p)),j&&O&&"values"!==O.name&&(E=!0,L=function(){return O.call(this)}),r&&!y||!h&&!E&&S[l]||u(S,l,L),c[e]=L,c[w]=p,v)if(g={values:j?L:_("values"),keys:m?L:_("keys"),entries:k},y)for(b in g)b in S||o(S,b,g[b]);else i(i.P+i.F*(h||E),e,g);return g}},function(t,e,n){t.exports=n(7)("native-function-to-string",Function.toString)},function(t,e,n){var r=n(38);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(40),i=n(20),o=n(26),u={};n(2)(u,n(0)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(10),i=n(41),o=n(25),u=n(16)("IE_PROTO"),c=function(){},a=function(){var t,e=n(19)("iframe"),r=o.length;for(e.style.display="none",n(46).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[o[r]];return a()};t.exports=Object.create||function(t,e){var n;return null!==t?(c.prototype=r(t),n=new c,c.prototype=null,n[u]=t):n=a(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(9),i=n(10),o=n(15);t.exports=n(4)?Object.defineProperties:function(t,e){i(t);for(var n,u=o(e),c=u.length,a=0;c>a;)r.f(t,n=u[a++],e[n]);return t}},function(t,e,n){var r=n(6),i=n(14),o=n(43)(!1),u=n(16)("IE_PROTO");t.exports=function(t,e){var n,c=i(t),a=0,s=[];for(n in c)n!=u&&r(c,n)&&s.push(n);for(;e.length>a;)r(c,n=e[a++])&&(~o(s,n)||s.push(n));return s}},function(t,e,n){var r=n(14),i=n(44),o=n(45);t.exports=function(t){return function(e,n,u){var c,a=r(e),s=i(a.length),f=o(u,s);if(t&&n!=n){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var r=n(24),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(24),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(6),i=n(27),o=n(16)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){"use strict";var r=n(49),i={};i[n(0)("toStringTag")]="z",i+""!="[object z]"&&n(5)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(21),i=n(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){var r=n(27),i=n(15);n(51)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){var r=n(23),i=n(3),o=n(12);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],u={};u[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",u)}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);n(29),n(17),n(48),n(50);var r=n(28),i=n.n(r),o={easeOutCubic:"all 600ms cubic-bezier(0.215, 0.61, 0.355, 1)",easeInBack:"all 600ms cubic-bezier(0.6, -0.28, 0.735, 0.045)"};function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=function(){function t(e,n,r,i,o,u,c){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.element=e,this.width=n,this.height=r,this.images=i,this.easing=o,this.sliderContainer=document.createElement("div"),this.sliderContainer.classList.add("slider-container"),this.random=u,this.responsible=c}var e,n,r;return e=t,(n=[{key:"createSliderNodes",value:function(){this.responsible?this.element.style.cssText="\n            max-width: ".concat(this.width,"px;\n            min-height : ").concat(this.height,"px;\n            overflow: hidden;\n        "):this.element.style.cssText="\n            width: ".concat(this.width,"px;\n            height : ").concat(this.height,"px;\n            overflow: hidden;\n        "),this.createImageNodes()}},{key:"createImageNodes",value:function(){var t=this;this.random&&(this.images=i()(this.images)),this.images.forEach(function(e,n){var r=document.createElement("div"),i=document.createElement("a"),u=document.createElement("img");r.classList.add("slider-content"),u.classList.add("slider-image"),i.setAttribute("href",e.url),u.setAttribute("src",e.path),t.responsible?(r.style.cssText="\n                width: ".concat(t.width,"px;\n                height : ").concat(t.height,"px;\n            "),u.style.cssText="\n                width: 100%;\n                height : ".concat(t.height,"px;\n                object-fit: cover;\n                object-position: 100% 100%;\n            ")):r.style.cssText="\n                width: ".concat(t.width,"px;\n                height : ").concat(t.height,"px;\n            "),t.setContainerPotision(r,n),i.appendChild(u),r.appendChild(i),t.sliderContainer.appendChild(r),t.sliderContainer.style.transition=o[t.easing]}),this.element.appendChild(this.sliderContainer)}},{key:"setContainerPotision",value:function(t,e){t.style.left="".concat(100*e,"%")}},{key:"_sliderContainer",get:function(){return this.sliderContainer}}])&&u(e.prototype,n),r&&u(e,r),t}();function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.prevText=e,this.nextText=n,this.element=this.initElement()}var e,n,r;return e=t,(n=[{key:"initElement",value:function(){var t=this,e=document.createElement("div");e.classList.add("slider-pager");return["prev","next"].forEach(function(n){var r=document.createElement("a");r.setAttribute("href","#"),r.classList.add("pager-btn-".concat(n)),r.textContent=t["".concat(n,"Text")],e.appendChild(r)}),e}},{key:"setPager",value:function(t){t.appendChild(this.element)}},{key:"setupListener",value:function(t,e,n,r,i){this.setPager(t.element);for(var o=this.element.getElementsByTagName("a"),u=0;u<o.length;u++)o[u].addEventListener("click",function(o){o.preventDefault();var u=o.target;n.stop(),u.classList.contains("pager-btn-prev")?t.currentIndex=t.currentIndex-1:t.currentIndex=t.currentIndex+1,t.moveSlider(t.currentIndex),i&&e.update(t.currentIndex),n.start(t,e,r,i)})}}])&&a(e.prototype,n),r&&a(e,r),t}();function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=function(){function t(e,n,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.element=n,this._current=r,this.containerElement=e,this.downX=0,this.moveX=0,this.differenceX=0,this.isDragging=!1,this.easing=i}var e,n,r;return e=t,r=[{key:"clamp",value:function(t,e,n){return Math.max(e,Math.min(t,n))}}],(n=[{key:"moveSlider",value:function(t){var e=this.element.getElementsByTagName("img").length-1;t<0&&(t=e),t>e&&(t=0),this.containerElement.style.left="".concat(-100*t,"%"),this._current=t}},{key:"setupListener",value:function(t,e,n,r){var i=this;this.containerElement.addEventListener("mousedown",function(t){return i.mouseDown(t)}),document.body.addEventListener("mousemove",function(t){return i.mouseMove(t)},{passive:!1}),document.body.addEventListener("mouseup",function(t){return i.mouseUp(t,e)},{passive:!1}),document.body.addEventListener("mouseleave",function(t){return i.mouseUp(t,e)},{passive:!1}),this.containerElement.addEventListener("touchstart",function(t){return i.mouseDown(t)}),document.body.addEventListener("touchmove",function(t){return i.mouseMove(t)},{passive:!1}),document.body.addEventListener("touchend",function(t){return i.mouseUp(t,e)},{passive:!1}),document.body.addEventListener("touchleave",function(t){return i.mouseUp(t,e)},{passive:!1}),this.containerElement.addEventListener("mouseover",function(e){return t.stop()}),this.containerElement.addEventListener("mouseout",function(o){return t.start(i,e,n,r)})}},{key:"mouseDown",value:function(t){var e;t.preventDefault(),e="mousedown"===t.type?t:t.changedTouches[0],this.downX=e.clientX,this.isDragging=!0}},{key:"mouseMove",value:function(e){if(this.isDragging){var n;e.preventDefault(),n="mousemove"===e.type?e:e.changedTouches[0],this.moveX=n.clientX,this.differenceX=this.moveX-this.downX;var r=this.containerElement.clientWidth;this.containerElement.style.transform="translateX(".concat(t.clamp(this.differenceX,this.differenceX-r,this.differenceX+r),"px)")}}},{key:"mouseUp",value:function(t,e){var n=this;if(this.containerElement.style.transition="all 0.5s ease",this.containerElement.style.transform="",this.isDragging){this.isDragging=!1;var r=this.containerElement.clientWidth;this.moveX>this.downX&&Math.abs(this.differenceX)>r/4&&(this._current-=1),this.moveX<this.downX&&Math.abs(this.differenceX)>r/4&&(this._current+=1),this.moveSlider(this._current),e.update(this._current),setTimeout(function(){n.containerElement.style.transition=o[n.easing]},500)}}},{key:"currentIndex",get:function(){return this._current},set:function(t){"number"==typeof t&&(this._current=t)}}])&&f(e.prototype,n),r&&f(e,r),t}();function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentElement=e,this.elem=document.createElement("nav"),this.elem.classList.add("pager-nav")}var e,n,r;return e=t,(n=[{key:"setNavigation",value:function(t){for(var e=0;e<t;e++){var n=document.createElement("a");n.classList.add("nav-btn"),n.setAttribute("href","#"),n.style.left="".concat(30*e,"px"),this.elem.appendChild(n)}this.currentElement.appendChild(this.elem)}},{key:"setupListener",value:function(t,e,n,r){for(var i=this,o=this.elem.getElementsByTagName("a"),u=0;u<o.length;u++)o[u].addEventListener("click",function(u){u.preventDefault();var c=u.target;e.stop();var a=[].slice.call(o).indexOf(c);t.moveSlider(a),i.update(a),e.start(t,i,n,r)})}},{key:"update",value:function(t){for(var e=this.elem.getElementsByTagName("a"),n=0;n<e.length;n++)e[n].classList.remove("active");e[t].classList.add("active")}}])&&h(e.prototype,n),r&&h(e,r),t}();function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var v=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.timer=null}var e,n,r;return e=t,(n=[{key:"start",value:function(t,e,n,r){this.timer=setInterval(function(){t.currentIndex+=1,t.moveSlider(t.currentIndex),r&&e.update(t.currentIndex)},n)}},{key:"stop",value:function(){clearInterval(this.timer)}}])&&d(e.prototype,n),r&&d(e,r),t}();function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var y=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._element=document.querySelector(e),this._height=300,this._width=700,this._direction="horizontal",this._loop=!0,this._time=3e3,this._images=[],this._overflow="hidden",this._autoStart=!0,this._current=0,this._easing="linear",this._pager=!0,this._loop=!1,this._random=!0,this._navigation=!0,this._prevText="<",this._nextText=">",this._responsible=!0,Object.keys(n).forEach(function(t){void 0!==n[t]&&(r["_".concat(t)]=n[t])})}var e,n,r;return e=t,(n=[{key:"init",value:function(){var t=new c(this._element,this._width,this._height,this._images,this._easing,this._random,this._responsible),e=new s(this._prevText,this._nextText),n=new v,r=new p(this._element,this._images),i=new l(t._sliderContainer,this._element,this._current,this._easing);t.createSliderNodes(),i.setupListener(n,r,this._time,this._navigation),this._autoStart&&n.start(i,r,this._time,this._navigation),this._navigation&&(r.setNavigation(this._images.length),r.update(i.currentIndex),r.setupListener(i,n,this._time,this._navigation)),this._pager&&e.setupListener(i,r,n,this._time,this._navigation)}},{key:"getSlider",value:function(){this.init()}}])&&m(e.prototype,n),r&&m(e,r),t}();n.d(e,"Slider",function(){return y})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,